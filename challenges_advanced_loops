# This file contains advanced loop exercises involving summation, comparisons, and element-wise list analysis.
# Includes problems like comparing total sums, early stopping conditions, finding max values, and identifying shared indices.


#Q1) Create a function named larger_sum() that takes two lists of numbers as parameters named lst1 and lst2. The function should return the list whose elements sum to the greater number. If the sum of the elements of each list are equal, return lst1.

def larger_sum(lst1, lst2):
  sum1 = 0
  sum2 = 0
  for number in lst1:
    sum1 += number
  for number in lst2:
    sum2 += number
  if sum1 >= sum2:
    return lst1
  else:
    return lst2
  
print(larger_sum([1, 9, 5], [2, 3, 7]))

#___________________________

#Q2) Create a function named over_nine_thousand() that takes a list of numbers named lst as a parameter. The function should sum the elements of the list until the sum is greater than 9000. When this happens, the function should return the sum. If the sum of all of the elements is never greater than 9000, the function should return total sum of all the elements. If the list is empty, the function should return 0.

def over_nine_thousand(lst):
  total = 0 
  for nums in lst:
    #Adding numbers to sum
    total += nums
    #Checking if sum is over 9000
    if (total > 9000):
      break
  return total

print(over_nine_thousand([8000, 900, 120, 5000]))

#___________________________

#Q3) Create a function named max_num() that takes a list of numbers named nums as a parameter. The function should return the largest number in nums. 

def max_num(nums):
  #Sets first number in nums to be the max
  max = nums[0]
  for number in nums:
    #Loops through each number in nums parameter
    if number > max:
      #Replaces new larger number in the max variable 
      max = number
  return max

print(max_num([50, -10, 0, 75, 20]))

#___________________________

#Q4) Write a function named same_values() that takes two lists of numbers of equal size as parameters. The function should return a list of the indices where the values were equal in lst1 and lst2.

def same_values(lst1, lst2):
  #Creates new list
  new_lst = []
  #Loops through the list checking the range and length of the list
  for index in range(len(lst1)):
    #Compares both lists for equal numbers in the same index number
    if lst1[index] == lst2[index]:
      #Appends matching indexs to the new list variable
      new_lst.append(index)
  return new_lst

print(same_values([5, 1, -10, 3, 3], [5, 10, -10, 3, 5]))




